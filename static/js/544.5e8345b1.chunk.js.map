{"version":3,"file":"static/js/544.5e8345b1.chunk.js","mappings":"qRAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBF,EAAAA,EAAAA,IAAA,qCAAwCC,IAF5D,cAEGE,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,gGAEoBT,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCQ,EADnC,gCAFpB,cAEGN,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEoBX,EAAAA,EAAAA,IAAA,gBACZW,EADY,oBACOV,EADP,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,MAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,gGAEoBX,EAAAA,EAAAA,IAAA,gBACZW,EADY,4BACeV,EADf,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKS,MALlB,gCAOHP,QAAQC,MAAR,MAPG,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,gGAEoBX,EAAAA,EAAAA,IAAA,gBACZW,EADY,4BACeV,EADf,2BAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gF,0KC9CMQ,EAAYC,EAAAA,GAAAA,IAAH,4GAMTC,EAAcD,EAAAA,GAAAA,IAAH,yC,SCDXE,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1B,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAmC,MAAtBF,EAASG,SAAmB,UAAY,GAHtB,wCAKrC,qGAC+BxB,EAAAA,EAAAA,MAD/B,UACQyB,EADR,wDAOEL,EAAUK,GAPZ,4CALqC,sBAsBrC,OAPAC,EAAAA,EAAAA,YAAU,WACR,GAAIT,EACF,OAAOG,EAAUH,IAjBgB,mCAmBnCU,EACD,GAAE,CAACV,KAGF,SAACJ,EAAD,UACGM,EAAOS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACV,SAAChB,EAAD,WACE,UAAC,KAAD,CAASiB,GAAE,UAAKT,GAAL,OAAkBM,GAAMI,MAAO,CAAEC,KAAMb,GAAlD,WACE,gBACEc,IAAKJ,EAAcK,EAAAA,EAAgBL,EAAcM,EACjDC,IAAKR,KAEP,uBAAIA,QANUD,EADR,KAajB,C,sDC5CM,IAAMO,EAAgB,iC,4DCa7B,UATa,WACX,OACE,UAAC,KAAD,YACE,cAAGG,KAAM,oBACT,SAAC,IAAD,MAGL,C","sources":["api/api.jsx","components/Movies/MovieList.styled.js","components/Movies/MovieList.jsx","const/secureBaseUrl.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '003c13e6e40e640c229ce092669f5920';\n\nexport async function getTrendingMovies() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieInfo(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 270px);\n  gap: 24px;\n `;\n\nexport const CardWrapper = styled.div`\n  border: none;\n`;\n\n","import { useState, useEffect } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { getTrendingMovies } from 'api/api';\nimport { posterBaseUrl } from 'const/secureBaseUrl';\nimport no_poster from 'images/no_poster.jpg';\nimport { Container, CardWrapper } from 'components/Movies/MovieList.styled';\n\nexport const MovieList = ({ list }) => {\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const currentUrl = location.pathname === '/' ? 'movies/' : '';\n\n  async function makeMovieList() {\n    const trendingMovies = await getTrendingMovies();\n\n    if (!trendingMovies) {\n      return;\n    }\n\n    setMovies(trendingMovies);\n  }\n\n  useEffect(() => {\n    if (list) {\n      return setMovies(list);\n    }\n    makeMovieList();\n  }, [list]);\n\n  return (\n    <Container>\n      {movies.map(({ id, title, poster_path }) => (\n        <CardWrapper key={id}>\n          <NavLink to={`${currentUrl}${id}`} state={{ from: location }}>\n            <img\n              src={poster_path ? posterBaseUrl + poster_path : no_poster}\n              alt={title}\n            />\n            <p>{title}</p>\n          </NavLink>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n","export const posterBaseUrl = 'https://image.tmdb.org/t/p/w500';\n","import { MovieList } from '../../components/Movies/MovieList';\n\nimport { Container } from 'components/App/App.styled';\n\nconst Home = () => {\n  return (\n    <Container>\n      <p text={'Trending today'} />\n      <MovieList />\n    </Container>\n  );\n};\n\nexport default Home;\n"],"names":["axios","API_KEY","getTrendingMovies","response","data","results","console","error","getMovieByName","query","getMovieInfo","movieId","getMovieCast","cast","getMovieReviews","Container","styled","CardWrapper","MovieList","list","useState","movies","setMovies","location","useLocation","currentUrl","pathname","trendingMovies","useEffect","makeMovieList","map","id","title","poster_path","to","state","from","src","posterBaseUrl","no_poster","alt","text"],"sourceRoot":""}