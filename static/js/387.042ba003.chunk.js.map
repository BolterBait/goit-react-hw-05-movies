{"version":3,"file":"static/js/387.042ba003.chunk.js","mappings":"qRAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBF,EAAAA,EAAAA,IAAA,qCAAwCC,IAF5D,cAEGE,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,gGAEoBT,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCQ,EADnC,gCAFpB,cAEGN,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEoBX,EAAAA,EAAAA,IAAA,gBACZW,EADY,oBACOV,EADP,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,MAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,gGAEoBX,EAAAA,EAAAA,IAAA,gBACZW,EADY,4BACeV,EADf,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKS,MALlB,gCAOHP,QAAQC,MAAR,MAPG,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,gGAEoBX,EAAAA,EAAAA,IAAA,gBACZW,EADY,4BACeV,EADf,2BAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gF,4KC9CMQ,E,OAAYC,GAAAA,IAAH,4G,SCqDtB,EA5Ca,WACX,IAAQL,GAAYM,EAAAA,EAAAA,MAAZN,QACR,GAAoCO,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOX,EAAP,KAAcc,EAAd,KAHiB,wCAKjB,WAA8BC,GAA9B,wFACyBV,EAAAA,EAAAA,IAAaU,GADtC,WACQC,EADR,QAGgBC,OAHhB,uBAIIH,GAAS,GAJb,0BAOED,EAAcG,GACdF,GAAS,GARX,4CALiB,sBAmBjB,OAJAI,EAAAA,EAAAA,YAAU,YAfO,oCAgBfC,CAAef,EAChB,GAAE,CAACA,KAGF,UAACI,EAAD,WACGR,IAAS,SAACoB,EAAA,EAAD,CAAcC,KAAM,8BACnB,IAAVrB,IACC,wBACGY,EAAWU,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAvB,OACd,2BACE,gBACEC,IAAKF,EAAeG,EAAAA,EAAgBH,EAAeI,EACnDC,IAAKN,KAEP,kCACO,0BAAOA,QAEd,uCACY,0BAAOE,SATZF,EADK,QAkBzB,C,qECnDYO,E,OAAQrB,GAAAA,EAAH,2D,SCELW,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,SAACS,EAAD,UAAQT,GAAtB,C,sDCJrB,IAAMM,EAAgB,iC","sources":["api/api.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/ErrorMessage/ErrorMessage.styled.js","components/ErrorMessage/ErrorMessage.jsx","const/secureBaseUrl.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '003c13e6e40e640c229ce092669f5920';\n\nexport async function getTrendingMovies() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieInfo(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 270px);\n  gap: 24px;\n `;\n\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCast } from 'api/api';\nimport no_poster from 'images/no_poster.jpg';\n\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\nimport { posterBaseUrl } from 'const/secureBaseUrl';\n\nimport { Container } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actorsList, setActorsList] = useState([]);\n  const [error, setError] = useState(null);\n\n  async function createCastList(id) {\n    const castList = await getMovieCast(id);\n\n    if (!castList.length) {\n      setError(true);\n      return;\n    }\n    setActorsList(castList);\n    setError(false);\n  }\n  useEffect(() => {\n    createCastList(movieId);\n  }, [movieId]);\n\n  return (\n    <Container>\n      {error && <ErrorMessage text={'No information till now.'} />}\n      {error === false && (\n        <ul>\n          {actorsList.map(({ name, profile_path, character }) => (\n            <li key={name}>\n              <img\n                src={profile_path ? posterBaseUrl + profile_path : no_poster}\n                alt={name}\n              ></img>\n              <p>\n                Name:<span>{name}</span>\n              </p>\n              <p>\n                Character:<span>{character}</span>\n              </p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Container>\n  );\n};\n\nexport default Cast;\n","import styled from \"styled-components\";\n\nexport const Error = styled.p`\nfont-size: 24px;\nfont-weight: 500;`","import PropTypes from 'prop-types';\n\nimport { Error } from './ErrorMessage.styled';\n\nexport const ErrorMessage = ({ text }) => <Error>{text}</Error>;\n\nErrorMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","export const posterBaseUrl = 'https://image.tmdb.org/t/p/w500';\n"],"names":["axios","API_KEY","getTrendingMovies","response","data","results","console","error","getMovieByName","query","getMovieInfo","movieId","getMovieCast","cast","getMovieReviews","Container","styled","useParams","useState","actorsList","setActorsList","setError","id","castList","length","useEffect","createCastList","ErrorMessage","text","map","name","profile_path","character","src","posterBaseUrl","no_poster","alt","Error"],"sourceRoot":""}