{"version":3,"file":"static/js/779.865010c8.chunk.js","mappings":"qRAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBF,EAAAA,EAAAA,IAAA,qCAAwCC,IAF5D,cAEGE,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,gGAEoBT,EAAAA,EAAAA,IAAA,+BACGC,EADH,+CAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEoBX,EAAAA,EAAAA,IAAA,gBACZW,EADY,oBACOV,EADP,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,MAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,gGAEoBX,EAAAA,EAAAA,IAAA,gBACZW,EADY,4BACeV,EADf,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKS,MALlB,gCAOHP,QAAQC,MAAR,MAPG,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,gGAEoBX,EAAAA,EAAAA,IAAA,gBACZW,EADY,4BACeV,EADf,2BAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gF,qEC9CMQ,E,OAAQC,GAAAA,EAAH,2D,SCELC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,SAACH,EAAD,UAAQG,GAAtB,C,0JCFfC,E,OAAYH,GAAAA,IAAH,0H,SC4CtB,EArCgB,WACd,IAAQL,GAAYS,EAAAA,EAAAA,MAAZT,QACR,GAA8BU,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOd,EAAP,KAAciB,EAAd,KAHoB,wCAKpB,WAA6BC,GAA7B,wFACwBX,EAAAA,EAAAA,IAAgBW,GADxC,WACQH,EADR,QAGeI,OAHf,uBAIIF,GAAS,GAJb,0BAOED,EAAWD,GACXE,GAAS,GARX,2CALoB,wBAmBpB,OAJAG,EAAAA,EAAAA,YAAU,YAfU,oCAgBlBC,CAAcjB,EACf,GAAE,CAACA,KAGF,UAACQ,EAAD,WACGZ,IAAS,SAACU,EAAA,EAAD,CAAcC,KAAM,8BACnB,IAAVX,IACC,wBACGe,EAAQO,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAYC,EAAvB,EAAuBA,QAAvB,OACX,2BACE,uBAAIF,KACJ,uBAAI,IAAIG,KAAKF,GAAYG,oBACzB,uBAAIF,MAHGF,EADE,QAWtB,C","sources":["api/api.jsx","components/ErrorMessage/ErrorMessage.styled.js","components/ErrorMessage/ErrorMessage.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '003c13e6e40e640c229ce092669f5920';\n\nexport async function getTrendingMovies() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieInfo(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from \"styled-components\";\n\nexport const Error = styled.p`\nfont-size: 24px;\nfont-weight: 500;`","import PropTypes from 'prop-types';\n\nimport { Error } from './ErrorMessage.styled';\n\nexport const ErrorMessage = ({ text }) => <Error>{text}</Error>;\n\nErrorMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n `;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieReviews } from 'api/api';\n\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\n\nimport { Container } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState(null);\n\n  async function createReviews(id) {\n    const reviews = await getMovieReviews(id);\n\n    if (!reviews.length) {\n      setError(true);\n      return;\n    }\n    setReviews(reviews);\n    setError(false);\n  }\n  useEffect(() => {\n    createReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <Container>\n      {error && <ErrorMessage text={'No information till now.'} />}\n      {error === false && (\n        <ul>\n          {reviews.map(({ author, created_at, content }) => (\n            <li key={author}>\n              <p>{author}</p>\n              <p>{new Date(created_at).toLocaleString()}</p>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Container>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","API_KEY","getTrendingMovies","response","data","results","console","error","getMovieByName","query","getMovieInfo","movieId","getMovieCast","cast","getMovieReviews","Error","styled","ErrorMessage","text","Container","useParams","useState","reviews","setReviews","setError","id","length","useEffect","createReviews","map","author","created_at","content","Date","toLocaleString"],"sourceRoot":""}